# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#   * Neither the name of Intel Corporation nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#Foosball SML
INPORT=goalkeeper1.IN:GOAL_KEEPER1
INPORT=striker1.IN:STRIKER1
INPORT=goalkeeper2.IN:GOAL_KEEPER2
INPORT=striker2.IN:STRIKER2
INPORT=winner1.IN:WINNER1
INPORT=winner2.IN:WINNER2
INPORT=sml.PREDICTION_TRIGGER:PREDICTION_TRIGGER
OUTPORT=predicted_winner1.OUT:PREDICTED_WINNER1
OUTPORT=predicted_winner2.OUT:PREDICTED_WINNER2
OUTPORT=state_end.OUT:PROCESS_END

#state machine
sml_state_machine(int/accumulator:setup_value=val:0:min:0|max:5|step:1)
sml_state_machine OUT -> IN[0] state_start_phase1_eq(int/equal)
state_start_phase1_const(constant/int:value=1) OUT -> IN[1] state_start_phase1_eq
state_start_phase1_eq OUT -> PULSE_IF_TRUE state_start_phase1(converter/boolean-to-empty)

sml_state_machine OUT -> IN[0] state_run_phase1_eq(int/equal)
state_run_phase1_const(constant/int:value=2) OUT -> IN[1] state_run_phase1_eq
state_run_phase1_eq OUT -> PULSE_IF_TRUE state_run_phase1(converter/boolean-to-empty)

sml_state_machine OUT -> IN[0] state_start_phase2_eq(int/equal)
state_start_phase2_const(constant/int:value=3) OUT -> IN[1] state_start_phase2_eq
state_start_phase2_eq OUT -> PULSE_IF_TRUE state_start_phase2(converter/boolean-to-empty)

sml_state_machine OUT -> IN[0] state_run_phase2_eq(int/equal)
state_run_phase2_const(constant/int:value=4) OUT -> IN[1] state_run_phase2_eq
state_run_phase2_eq OUT -> PULSE_IF_TRUE state_run_phase2(converter/boolean-to-empty)

sml_state_machine OUT -> IN[0] state_end_eq(int/equal)
state_end_const(constant/int:value=5) OUT -> IN[1] state_end_eq
state_end_eq OUT -> PULSE_IF_TRUE state_end(converter/boolean-to-empty)

#state machine timer
timer(timer:interval=100) OUT -> INC sml_state_machine
sml_state_machine OUT -> IN timer_stop(converter/int-to-boolean:true_range=min:1|max:5) OUT -> ENABLED timer
winner1 OUT -> IN _(converter/empty-to-boolean:output_value=true) OUT -> ENABLED timer
winner2 OUT -> IN _(converter/empty-to-boolean:output_value=true) OUT -> ENABLED timer

#SML Definition
sml(SML)

goalkeeper1(hub/int)
striker1(hub/int)
goalkeeper2(hub/int)
striker2(hub/int)

sml_goalkeeper1(converter/int-to-float) OUT -> IN_ID_VAR sml
sml_striker1(converter/int-to-float) OUT -> IN_ID_VAR sml
sml_goalkeeper2(converter/int-to-float) OUT -> IN_ID_VAR sml
sml_striker2(converter/int-to-float) OUT -> IN_ID_VAR sml
sml_winner(converter/int-to-float) OUT -> IN tagger(machine-learning/tagger:tag=winner)
tagger OUT -> OUT_ID_VAR sml

sml OUT -> IN FilterSml(machine-learning/filter:tag=winner)
FilterSml OUT -> IN _(converter/float-to-empty:range=min:0.5|max:1.5) OUT -> IN predicted_winner1(hub/empty)
FilterSml OUT -> IN _(converter/float-to-empty:range=min:1.5|max:2) OUT -> IN predicted_winner2(hub/empty)

#Phase 1 - start
state_start_phase1 OUT -> IN phase1_goalkeeper1(converter/empty-to-int)
state_start_phase1 OUT -> IN phase1_striker1(converter/empty-to-int)
state_start_phase1 OUT -> IN phase1_goalkeeper2(converter/empty-to-int)
state_start_phase1 OUT -> IN phase1_striker2(converter/empty-to-int)
state_start_phase1 OUT -> IN phase1_winner(converter/empty-to-int)

goalkeeper1 OUT -> OUTPUT_VALUE phase1_goalkeeper1
striker1 OUT -> OUTPUT_VALUE phase1_striker1
goalkeeper2 OUT -> OUTPUT_VALUE phase1_goalkeeper2
striker2 OUT -> OUTPUT_VALUE phase1_striker2
winner1(hub/empty) OUT -> IN _(converter/empty-to-int:output_value=val:1|min:0|max:2|step:1) OUT -> OUTPUT_VALUE phase1_winner
winner2(hub/empty) OUT -> IN _(converter/empty-to-int:output_value=val:2|min:0|max:2|step:1) OUT -> OUTPUT_VALUE phase1_winner

phase1_goalkeeper1 OUT -> IN sml_goalkeeper1
phase1_striker1 OUT -> IN sml_striker1
phase1_goalkeeper2 OUT -> IN sml_goalkeeper2
phase1_striker2 OUT -> IN sml_striker2
phase1_winner OUT -> IN sml_winner

#Phase 1 - run
state_run_phase1 OUT -> TRIGGER sml
state_run_phase1 OUT -> IN _(converter/empty-to-boolean:output_value=false) OUT -> ENABLED timer
sml PROCESS_FINISHED -> IN _(converter/empty-to-boolean:output_value=true) OUT -> ENABLED timer

#Phase 2 - start
state_start_phase2 OUT -> IN phase2_goalkeeper1(converter/empty-to-int)
state_start_phase2 OUT -> IN phase2_striker1(converter/empty-to-int)
state_start_phase2 OUT -> IN phase2_goalkeeper2(converter/empty-to-int)
state_start_phase2 OUT -> IN phase2_striker2(converter/empty-to-int)
state_start_phase2 OUT -> IN phase2_winner(converter/empty-to-int)

goalkeeper1 OUT -> OUTPUT_VALUE phase2_goalkeeper1
striker1 OUT -> OUTPUT_VALUE phase2_striker1
goalkeeper2 OUT -> OUTPUT_VALUE phase2_goalkeeper2
striker2 OUT -> OUTPUT_VALUE phase2_striker2
winner1 OUT -> IN _(converter/empty-to-int:output_value=val:2|min:0|max:2|step:1) OUT -> OUTPUT_VALUE phase2_winner
winner2 OUT -> IN _(converter/empty-to-int:output_value=val:1|min:0|max:2|step:1) OUT -> OUTPUT_VALUE phase2_winner

phase2_goalkeeper2 OUT -> IN sml_goalkeeper1
phase2_striker2 OUT -> IN sml_striker1
phase2_goalkeeper1 OUT -> IN sml_goalkeeper2
phase2_striker1 OUT -> IN sml_striker2
phase2_winner OUT -> IN sml_winner

#Phase 2 - run
state_run_phase2 OUT -> TRIGGER sml
state_run_phase2 OUT -> IN _(converter/empty-to-boolean:output_value=false) OUT -> ENABLED timer

#End
state_end OUT -> IN _(converter/empty-to-int:output_value=val:0|min:0|max:2|step:1) OUT -> IN sml_winner

#Prediction phase
goalkeeper1 OUT -> IN sml_goalkeeper1
striker1 OUT -> IN sml_striker1
goalkeeper2 OUT -> IN sml_goalkeeper2
striker2 OUT -> IN sml_striker2
